[{route: /api_int/logs, method: get, responses: {"200": {description: OK, content: {application/json: {schema: {type: array, items: {"$ref": "#/components/schemas/LoggerDTO"}}}}}}}, {route: /api_int/logs, method: put, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/LoggerDTO"}}}, required: true}, responses: {"204": {description: "No Content"}}}, {route: "/api/rest/z3950", method: post, parameters: [[name, in, required, schema]; [server, query, true, {type: array, items: {type: string}}], [page, query, false, {type: integer, format: "int32", default: 0}], [size, query, false, {type: integer, format: "int32", default: 10}], [library, query, true, {type: string}], [project, query, false, {type: string}], [lot, query, false, {type: string}], [mapping, query, true, {type: string}], [validation, query, false, {type: boolean, default: false}], [dedup, query, false, {type: boolean, default: false}], [dedupProcess, query, false, {type: string, enum: [ADD, REPLACE, IGNORE]}]], requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/Z3950RecordDTO"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [["$ref"]; ["#/components/schemas/ImportReport"], ["#/components/schemas/PageZ3950RecordDTO"]]}}}}}}, {route: "/api/rest/z3950Server", method: get, parameters: [[name, in, required, schema]; [dto, query, true, {type: boolean}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [[type, items]; [array, {"$ref": "#/components/schemas/Z3950ServerDTO"}], [array, {"$ref": "#/components/schemas/Z3950Server"}]]}}}}}}, {route: "/api/rest/z3950Server", method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/Z3950Server"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/Z3950Server"}}}}}}, {route: "/api/rest/z3950Server/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/Z3950Server"}}}}}}, {route: "/api/rest/z3950Server/{id}", method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/Z3950Server"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/Z3950Server"}}}}}}, {route: "/api/rest/z3950Server/{id}", method: delete, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK}}}, {route: /api/rest/workflow_model, method: get, parameters: [[name, in, required, schema]; [search, query, false, {type: string}], [initiale, query, false, {type: string}], [libraries, query, false, {type: array, items: {type: string}}], [page, query, false, {type: integer, format: "int32", default: 0}], [size, query, false, {type: integer, format: "int32", default: 10}], [sorts, query, false, {type: array, items: {type: string}}], [library, query, true, {type: string}], [project, query, false, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{type: array, items: {"$ref": "#/components/schemas/SimpleWorkflowModelDTO"}}, {"$ref": "#/components/schemas/PageSimpleWorkflowModelDTO"}]}}}}}}, {route: /api/rest/workflow_model, method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/WorkflowModelDTO"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/WorkflowModelDTO"}}}}}}, {route: "/api/rest/workflow_model/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/WorkflowModelDTO"}}}}}}, {route: "/api/rest/workflow_model/{id}", method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/WorkflowModelDTO"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/WorkflowModelDTO"}}}}}}, {route: "/api/rest/workflow_model/{id}", method: delete, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {*/*: {schema: {type: object}}}}}}, {route: /api/rest/workflow_group, method: get, parameters: [[name, in, required, schema]; [search, query, false, {type: string}], [initiale, query, false, {type: string}], [libraries, query, false, {type: array, items: {type: string}}], [page, query, false, {type: integer, format: "int32", default: 0}], [size, query, false, {type: integer, format: "int32", default: 10}], [sorts, query, false, {type: array, items: {type: string}}], [library, query, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{type: array, items: {"$ref": "#/components/schemas/SimpleWorkflowGroupDTO"}}, {"$ref": "#/components/schemas/PageSimpleWorkflowGroupDTO"}]}}}}}}, {route: /api/rest/workflow_group, method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/WorkflowGroupDTO"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/WorkflowGroupDTO"}}}}}}, {route: "/api/rest/workflow_group/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/WorkflowGroupDTO"}}}}}}, {route: "/api/rest/workflow_group/{id}", method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/WorkflowGroupDTO"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/WorkflowGroupDTO"}}}}}}, {route: "/api/rest/workflow_group/{id}", method: delete, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {*/*: {schema: {type: object}}}}}}, {route: /api/rest/workflow, method: get, parameters: [[name, in, required, schema]; [docUnitId, query, true, {type: string}], [key, query, true, {type: string, enum: [INITIALISATION_DOCUMENT, GENERATION_BORDEREAU, VALIDATION_CONSTAT_ETAT, VALIDATION_BORDEREAU_CONSTAT_ETAT, CONSTAT_ETAT_AVANT_NUMERISATION, NUMERISATION_EN_ATTENTE, CONSTAT_ETAT_APRES_NUMERISATION, LIVRAISON_DOCUMENT_EN_COURS, RELIVRAISON_DOCUMENT_EN_COURS, CONTROLES_AUTOMATIQUES_EN_COURS, CONTROLE_QUALITE_EN_COURS, PREREJET_DOCUMENT, PREVALIDATION_DOCUMENT, VALIDATION_DOCUMENT, VALIDATION_NOTICES, RAPPORT_CONTROLES, ARCHIVAGE_DOCUMENT, DIFFUSION_DOCUMENT, DIFFUSION_DOCUMENT_OMEKA, DIFFUSION_DOCUMENT_DIGITAL_LIBRARY, DIFFUSION_DOCUMENT_LOCALE, CLOTURE_DOCUMENT]}], [doc, query, true, {type: string}], [docUnit, query, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{"$ref": "#/components/schemas/StateIsDoneDTO"}, {type: object}, {"$ref": "#/components/schemas/DocUnitWorkflowDTO"}, {"$ref": "#/components/schemas/BooleanValueDTO"}]}}}}}}, {route: /api/rest/workflow, method: post, requestBody: {content: {application/json: {schema: {type: array, items: {type: string}}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {type: object}}}}}}, {route: /api/rest/viewsformat, method: get, parameters: [[name, in, required, schema]; [search, query, false, {type: string}], [libraries, query, false, {type: array, items: {type: string}}], [page, query, false, {type: integer, format: "int32", default: 0}], [size, query, false, {type: integer, format: "int32", default: 10}], [project, query, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{type: array, items: {"$ref": "#/components/schemas/SimpleViewsFormatConfigurationDTO"}}, {"$ref": "#/components/schemas/PageSimpleViewsFormatConfigurationDTO"}]}}}}}}, {route: /api/rest/viewsformat, method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/ViewsFormatConfigurationDTO"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/ViewsFormatConfigurationDTO"}}}}}}, {route: "/api/rest/viewsformat/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/ViewsFormatConfigurationDTO"}}}}}}, {route: "/api/rest/viewsformat/{id}", method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/ViewsFormatConfigurationDTO"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/ViewsFormatConfigurationDTO"}}}}}}, {route: "/api/rest/viewsformat/{id}", method: delete, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/CheckConfigurationDTO"}}}}}}, {route: /api/rest/user, method: get, parameters: [[name, in, required, schema]; [search, query, false, {type: string}], [initiale, query, false, {type: string}], [active, query, false, {type: boolean, default: true}], [libraries, query, false, {type: array, items: {type: string}}], [roles, query, false, {type: array, items: {type: string}}], [categories, query, false, {type: array, items: {type: string, enum: [PROVIDER, OTHER]}}], [page, query, false, {type: integer, format: "int32", default: 0}], [size, query, false, {type: integer, format: "int32", default: 10}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{type: array, items: {"$ref": "#/components/schemas/SimpleUserDTO"}}, {"$ref": "#/components/schemas/PageSimpleUserDTO"}]}}}}}}, {route: /api/rest/user, method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/UserCreationDTO"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/UserDTO"}}}}}}, {route: "/api/rest/user/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{type: object, additionalProperties: {type: object}}, {"$ref": "#/components/schemas/UserDTO"}]}}}}}}, {route: "/api/rest/user/{id}", method: post, parameters: [[name, in, required, schema]; [id, path, true, {type: string}], [file, query, true, {type: array, items: {type: string, format: binary}}]], requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/UserDTO"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{type: object, additionalProperties: {type: object}}, {"$ref": "#/components/schemas/UserDTO"}]}}}}}}, {route: "/api/rest/user/{id}", method: delete, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/UserDTO"}}}}}}, {route: /api/rest/user/dashboard, method: post, responses: {"200": {description: OK}}}, {route: /api/rest/train, method: get, parameters: [[name, in, required, schema]; [project, query, true, {type: string}], [search, query, false, {type: string}], [libraries, query, false, {type: array, items: {type: string}}], [projects, query, false, {type: array, items: {type: string}}], [active, query, false, {type: boolean, default: true}], [statuses, query, false, {type: array, items: {type: string}}], [providerSendingDateFrom, query, false, {type: string, format: date}], [providerSendingDateTo, query, false, {type: string, format: date}], [returnDateFrom, query, false, {type: string, format: date}], [returnDateTo, query, false, {type: string, format: date}], [docNumber, query, false, {type: integer, format: "int32"}], [page, query, false, {type: integer, format: "int32", default: 0}], [size, query, false, {type: integer, format: "int32", default: 10}], [projectIds, query, false, {type: array, items: {type: string}}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{"$ref": "#/components/schemas/PageSimpleTrainDTO"}, {type: array, items: {"$ref": "#/components/schemas/SimpleTrainDTO"}}, {type: array, items: {"$ref": "#/components/schemas/TrainDTO"}}]}}}}}}, {route: /api/rest/train, method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/TrainDTO"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/TrainDTO"}}}}}}, {route: "/api/rest/train/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/TrainDTO"}}}}}}, {route: "/api/rest/train/{id}", method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/TrainDTO"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/TrainDTO"}}}}}}, {route: "/api/rest/train/{id}", method: delete, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/TrainDTO"}}}}}}, {route: /api/rest/template, method: get, parameters: [[name, in, required, schema]; [library, query, false, {"$ref": "#/components/schemas/Library"}]], responses: {"200": {description: OK, content: {application/json: {schema: {type: array, items: {"$ref": "#/components/schemas/Template"}}}}}}}, {route: /api/rest/template, method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/Template"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/Template"}}}}}}, {route: "/api/rest/template/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK}}}, {route: "/api/rest/template/{id}", method: post, parameters: [[name, in, required, schema]; [id, path, true, {type: string}], [file, query, true, {type: array, items: {type: string, format: binary}}]], requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/Template"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/Template"}}}}}}, {route: /api/rest/role, method: get, parameters: [[name, in, required, schema]; [search, query, true, {type: string}], [authorizations, query, false, {type: array, items: {type: string}}], [dto, query, true, {type: boolean}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [[type, items]; [array, {"$ref": "#/components/schemas/RoleDTO"}], [array, {"$ref": "#/components/schemas/Role"}]]}}}}}}, {route: /api/rest/role, method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/Role"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/Role"}}}}}}, {route: "/api/rest/role/{identifier}", method: get, parameters: [[name, in, required, schema]; [identifier, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/Role"}}}}}}, {route: "/api/rest/role/{identifier}", method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/Role"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/Role"}}}}}}, {route: "/api/rest/role/{identifier}", method: delete, parameters: [[name, in, required, schema]; [identifier, path, true, {type: string}]], responses: {"200": {description: OK}}}, {route: /api/rest/reset, method: post, requestBody: {content: {application/json: {schema: {type: string}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {type: object}}}}}}, {route: /api/rest/project, method: get, parameters: [[name, in, required, schema]; [from, query, true, {type: string, format: date}], [library, query, false, {type: array, items: {type: string}}], [status, query, false, {type: array, items: {type: string, enum: [CREATED, ONGOING, PENDING, CANCELED, CLOSED]}}], [search, query, false, {type: string}], [initiale, query, false, {type: string}], [active, query, false, {type: boolean, default: true}], [libraries, query, false, {type: array, items: {type: string}}], [provider, query, false, {type: array, items: {type: string}}], [page, query, false, {type: integer, format: "int32", default: 0}], [size, query, false, {type: integer, format: "int32", default: 2147483647}], [searchProject, query, false, {type: string}], [statuses, query, false, {type: array, items: {type: string, enum: [CREATED, ONGOING, PENDING, CANCELED, CLOSED]}}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{"$ref": "#/components/schemas/PageSimpleProjectDTO"}, {type: array, items: {"$ref": "#/components/schemas/AuditProjectRevisionDTO"}}, {type: array, items: {"$ref": "#/components/schemas/SimpleProjectDTO"}}]}}}}}}, {route: /api/rest/project, method: post, requestBody: {content: {application/json: {schema: {type: array, items: {"$ref": "#/components/schemas/ProjectDTO"}}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/ProjectDTO"}}}}}}, {route: "/api/rest/project/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/ProjectDTO"}}}}}}, {route: "/api/rest/project/{id}", method: post, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/ProjectDTO"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/ProjectDTO"}}, application/json: {schema: {oneOf: [{type: object}, {"$ref": "#/components/schemas/ProjectDTO"}]}}}}}}, {route: "/api/rest/project/{id}", method: delete, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/ProjectDTO"}}}}}}, {route: "/api/rest/physicaldocument/{identifier}", method: get, parameters: [[name, in, required, schema]; [identifier, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/PhysicalDocumentDTO"}}}}}}, {route: "/api/rest/physicaldocument/{identifier}", method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/PhysicalDocumentDTO"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/PhysicalDocumentDTO"}}}}}}, {route: /api/rest/ocrlangconfiguration, method: get, parameters: [[name, in, required, schema]; [search, query, false, {type: string}], [libraries, query, false, {type: array, items: {type: string}}], [page, query, false, {type: integer, format: "int32", default: 0}], [size, query, false, {type: integer, format: "int32", default: 10}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/PageSimpleOcrLangConfigDTO"}}}}}}, {route: /api/rest/ocrlangconfiguration, method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/OcrLangConfigurationDTO"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/OcrLangConfigurationDTO"}}}}}}, {route: "/api/rest/ocrlangconfiguration/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/OcrLangConfigurationDTO"}}}}}}, {route: "/api/rest/ocrlangconfiguration/{id}", method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/OcrLangConfigurationDTO"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/OcrLangConfigurationDTO"}}}}}}, {route: "/api/rest/ocrlangconfiguration/{id}", method: delete, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {*/*: {schema: {type: object}}}}}}, {route: /api/rest/oaipmh, method: get, parameters: [[name, in, required, schema]; [baseUrl, query, true, {type: string}], [from, query, false, {type: string}], [to, query, false, {type: string}], [set, query, false, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{"$ref": "#/components/schemas/IdentifyType"}, {type: object, additionalProperties: {type: string}}]}}}}}}, {route: /api/rest/oaipmh, method: post, parameters: [[name, in, required, schema]; [library, query, true, {type: string}], [project, query, false, {type: string}], [lot, query, false, {type: string}], [validation, query, false, {type: boolean, default: false}], [dedup, query, false, {type: boolean, default: false}], [dedupProcess, query, false, {type: string, enum: [ADD, REPLACE, IGNORE]}], [baseUrl, query, true, {type: string}], [from, query, false, {type: string}], [to, query, false, {type: string}], [set, query, false, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/ImportReport"}}}}}}, {route: /api/rest/multidelivery, method: get, parameters: [[name, in, required, schema]; [search, query, false, {type: string}], [libraries, query, false, {type: array, items: {type: string}}], [projects, query, false, {type: array, items: {type: string}}], [lots, query, false, {type: array, items: {type: string}}], [providers, query, false, {type: array, items: {type: string}}], [status, query, false, {type: array, items: {type: string, enum: [SAVED, DELIVERING, DELIVERED, TO_BE_CONTROLLED, VALIDATED, REJECTED, BACK_TO_PROVIDER, AUTOMATICALLY_REJECTED, DELIVERED_AGAIN, DELIVERING_ERROR, TREATED, CLOSED, CANCELED]}}], [deliveryDateFrom, query, false, {type: string, format: date}], [deliveryDateTo, query, false, {type: string, format: date}], [page, query, false, {type: integer, format: "int32", default: 0}], [size, query, false, {type: integer, format: "int32", default: 10}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/PageMultiLotsDeliveryDTO"}}}}}}, {route: /api/rest/multidelivery, method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/MultiLotsDeliveryDTO"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/MultiLotsDeliveryDTO"}}}}}}, {route: "/api/rest/multidelivery/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{type: object, additionalProperties: {"$ref": "#/components/schemas/PreDeliveryDTO"}}, {"$ref": "#/components/schemas/MultiLotsDeliveryDTO"}, {type: object, additionalProperties: {type: array, items: {"$ref": "#/components/schemas/SimpleDeliveredDigitalDocDTO"}}}]}}}}}}, {route: "/api/rest/multidelivery/{id}", method: post, parameters: [[name, in, required, schema]; [id, path, true, {type: string}], [prefixToExclude, query, false, {type: array, items: {type: string}}]], requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/MultiLotsDeliveryRequestWrapper"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {oneOf: [{type: object}, {"$ref": "#/components/schemas/MultiLotsDeliveryDTO"}]}}}}}}, {route: "/api/rest/multidelivery/{id}", method: delete, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {*/*: {schema: {type: object}}}}}}, {route: /api/rest/mapping, method: get, parameters: [[name, in, required, schema]; [library, query, false, {"$ref": "#/components/schemas/Library"}], [type, query, false, {type: string, enum: [EAD, DC, DCQ, MARC]}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{uniqueItems: true, type: array, items: {"$ref": "#/components/schemas/MappingDTO"}}, {type: array, items: {"$ref": "#/components/schemas/MappingDTO"}}]}}}}}}, {route: /api/rest/mapping, method: post, parameters: [[name, in, required, schema]; [library, query, true, {type: string}], [file, query, true, {type: array, items: {type: string, format: binary}}]], requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/Mapping"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/Mapping"}}}}}}, {route: "/api/rest/mapping/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}], [library, query, false, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/Mapping"}}}}}}, {route: "/api/rest/mapping/{id}", method: post, parameters: [[name, in, required, schema]; [id, path, true, {type: string}], [file, query, true, {type: array, items: {type: string, format: binary}}]], requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/Mapping"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/Mapping"}}}}}}, {route: "/api/rest/mapping/{id}", method: delete, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {*/*: {schema: {type: object}}}}}}, {route: /api/rest/lot, method: get, parameters: [[name, in, required, schema]; [from, query, true, {type: string, format: date}], [library, query, false, {type: array, items: {type: string}}], [project, query, false, {type: array, items: {type: string}}], [status, query, false, {type: array, items: {type: string, enum: [CREATED, ONGOING, PENDING, CANCELED, CLOSED]}}], [search, query, false, {type: string}], [libraries, query, false, {type: array, items: {type: string}}], [projects, query, false, {type: array, items: {type: string}}], [active, query, false, {type: boolean, default: true}], [statuses, query, false, {type: array, items: {type: string, enum: [CREATED, ONGOING, PENDING, CANCELED, CLOSED]}}], [docNumber, query, false, {type: integer, format: "int32"}], [fileFormat, query, false, {type: array, items: {type: string}}], [page, query, false, {type: integer, format: "int32", default: 0}], [size, query, false, {type: integer, format: "int32", default: 10}], [sorts, query, false, {type: array, items: {type: string}}], [projectIds, query, true, {type: array, items: {type: string}}], [target, query, false, {type: string}], [lot, query, true, {type: array, items: {type: string}}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{type: array, items: {"$ref": "#/components/schemas/SimpleLotDTO"}}, {type: array, items: {"$ref": "#/components/schemas/AuditLotRevisionDTO"}}, {"$ref": "#/components/schemas/PageSimpleLotDTO"}, {type: array, items: {"$ref": "#/components/schemas/LotDTO"}}, {type: array, items: {"$ref": "#/components/schemas/LotListDTO"}}]}}}}}}, {route: /api/rest/lot, method: post, parameters: [[name, in, required, schema]; [page, query, false, {type: integer, format: "int32", default: 0}], [size, query, false, {type: integer, format: "int32", default: 10}], [sorts, query, false, {type: array, items: {type: string}}], [project, query, true, {type: string}]], requestBody: {content: {application/json: {schema: {type: array, items: {type: string}}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {oneOf: [{"$ref": "#/components/schemas/Lot"}, {"$ref": "#/components/schemas/LotDTO"}, {type: array, items: {"$ref": "#/components/schemas/ResultAdminLotDTO"}}]}}, application/json: {schema: {"$ref": "#/components/schemas/PageSimpleLotDTO"}}}}}}, {route: "/api/rest/lot/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/LotDTO"}}}}}}, {route: "/api/rest/lot/{id}", method: post, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/LotDTO"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {oneOf: [{type: object}, {"$ref": "#/components/schemas/LotDTO"}]}}}}}}, {route: "/api/rest/lot/{id}", method: delete, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/LotDTO"}}}}}}, {route: /api/rest/libraryparameter, method: get, parameters: [[name, in, required, schema]; [sftpConfig, query, false, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/LibraryParameterValuedDTO"}}}}}}, {route: /api/rest/libraryparameter, method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/LibraryParameterValuedDTO"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/LibraryParameterValuedDTO"}}}}}}, {route: "/api/rest/libraryparameter/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/LibraryParameterDTO"}}}}}}, {route: "/api/rest/libraryparameter/{id}", method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/LibraryParameterValuedDTO"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/LibraryParameterValuedDTO"}}}}}}, {route: "/api/rest/libraryparameter/{id}", method: delete, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/LibraryParameter"}}}}}}, {route: /api/rest/library, method: get, parameters: [[name, in, required, schema]; [search, query, false, {type: string}], [initiale, query, false, {type: string}], [institutions, query, false, {type: array, items: {type: string}}], [isActive, query, false, {type: boolean, default: true}], [page, query, false, {type: integer, format: "int32", default: 0}], [size, query, false, {type: integer, format: "int32", default: 10}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{type: array, items: {"$ref": "#/components/schemas/SimpleLibraryDTO"}}, {"$ref": "#/components/schemas/PageSimpleLibraryDTO"}]}}}}}}, {route: /api/rest/library, method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/LibraryDTO"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/LibraryDTO"}}}}}}, {route: "/api/rest/library/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{type: array, items: {"$ref": "#/components/schemas/SimpleUserDTO"}}, {"$ref": "#/components/schemas/LibraryDTO"}, {type: object, additionalProperties: {type: object}}]}}}}}}, {route: "/api/rest/library/{id}", method: post, parameters: [[name, in, required, schema]; [id, path, true, {type: string}], [file, query, true, {type: array, items: {type: string, format: binary}}]], requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/LibraryDTO"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/LibraryDTO"}}}}}}, {route: "/api/rest/library/{id}", method: delete, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/Library"}}}}}}, {route: "/api/rest/internet_archive/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/InternetArchiveItemDTO"}}}}}}, {route: "/api/rest/internet_archive/{id}", method: post, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/InternetArchiveItemDTO"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {type: object}}}}}}, {route: /api/rest/import, method: post, parameters: [[name, in, required, schema]; [file, query, true, {type: array, items: {type: string, format: binary}}], [type, query, false, {type: string, default: SIMPLE, enum: [SIMPLE, SIMPLE_MULTI_NOTICE, SIMPLE_MULTI_MULTI_NOTICE, HIERARCHY_IN_SINGLE_NOTICE, HIERARCHY_IN_MULTIPLE_IMPORT]}], [format, query, true, {type: string, enum: [MARC, MARCJSON, MARCXML, CSV, DC, DCQ, EAD, OAIPMH]}], [encoding, query, false, {type: string, default: "UTF_8", enum: [ANSEL, "ISO_5426", "ISO_6937", "ISO_8859_1", "UTF_8"]}], [mapping, query, true, {type: string}], [mappingChildren, query, false, {type: string}], [parent, query, false, {type: string}], [library, query, true, {type: string}], [project, query, false, {type: string}], [lot, query, false, {type: string}], [join, query, false, {type: string}], [validation, query, false, {type: boolean, default: false}], [dedup, query, false, {type: boolean, default: false}], [dedupProcess, query, false, {type: string, enum: [ADD, REPLACE, IGNORE]}], [archivable, query, false, {type: boolean, default: false}], [distributable, query, false, {type: boolean, default: false}], [prop_order, query, false, {type: string, default: BY_PROPERTY_TYPE, enum: [BY_CREATION, BY_PROPERTY_TYPE]}], [defaultProcess, query, false, {type: string, default: ADD, enum: [ADD, REPLACE, IGNORE]}]], requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/ImportReport"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/ImportReport"}}}}}}, {route: "/api/rest/impdocunit/{id}", method: post, parameters: [[name, in, required, schema]; [id, path, true, {type: string}], [process, query, false, {type: string, default: "false"}]], responses: {"200": {description: OK, content: {application/json: {schema: {type: object}}}}}}, {route: /api/rest/imagemetadata, method: get, parameters: [[name, in, required, schema]; [docUnitId, query, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [[type, items]; [array, {"$ref": "#/components/schemas/ImageMetadataValue"}], [array, {"$ref": "#/components/schemas/ImageMetadataProperty"}]]}}}}}}, {route: /api/rest/imagemetadata, method: post, requestBody: {content: {application/json: {schema: {type: array, items: {"$ref": "#/components/schemas/ImageMetadataProperty"}}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{type: array, items: {"$ref": "#/components/schemas/ImageMetadataValue"}}, {"$ref": "#/components/schemas/ImageMetadataProperty"}, {type: array, items: {"$ref": "#/components/schemas/ImageMetadataProperty"}}]}}}}}}, {route: "/api/rest/imagemetadata/{id}", method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/ImageMetadataProperty"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/ImageMetadataProperty"}}}}}}, {route: /api/rest/help, method: get, parameters: [[name, in, required, schema]; [modules, query, false, {type: array, items: {type: string}}], [types, query, false, {type: array, items: {type: string, enum: [PGCN, CUSTOM]}}], [search, query, false, {type: string}], [tag, query, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {type: array, items: {"$ref": "#/components/schemas/ModuleDto"}}}, */*: {schema: {oneOf: [{type: array, items: {type: string}}, {"$ref": "#/components/schemas/HelpPageDto"}]}}}}}}, {route: /api/rest/help, method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/HelpPage"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/HelpPage"}}}}}}, {route: "/api/rest/help/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/HelpPage"}}}}}}, {route: "/api/rest/help/{id}", method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/HelpPage"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/HelpPage"}}}}}}, {route: "/api/rest/help/{id}", method: delete, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK}}}, {route: /api/rest/ftpconfiguration, method: get, parameters: [[name, in, required, schema]; [search, query, false, {type: string}], [libraries, query, false, {type: array, items: {type: string}}], [page, query, false, {type: integer, format: "int32", default: 0}], [size, query, false, {type: integer, format: "int32", default: 10}], [project, query, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{type: array, items: {"$ref": "#/components/schemas/SimpleFTPConfigurationDTO"}}, {"$ref": "#/components/schemas/PageSimpleFTPConfigurationDTO"}]}}}}}}, {route: /api/rest/ftpconfiguration, method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/FTPConfigurationDTO"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/FTPConfigurationDTO"}}}}}}, {route: "/api/rest/ftpconfiguration/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/FTPConfigurationDTO"}}}}}}, {route: "/api/rest/ftpconfiguration/{id}", method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/FTPConfigurationDTO"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/FTPConfigurationDTO"}}}}}}, {route: "/api/rest/ftpconfiguration/{id}", method: delete, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/FTPConfigurationDTO"}}}}}}, {route: /api/rest/filesgestionconfig, method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/FilesGestionConfigDTO"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/FilesGestionConfigDTO"}}}}}}, {route: "/api/rest/filesgestionconfig/{id}", method: post, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/FilesGestionConfigDTO"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/FilesGestionConfigDTO"}}}}}}, {route: /api/rest/exportftpconfiguration, method: get, parameters: [[name, in, required, schema]; [search, query, false, {type: string}], [libraries, query, false, {type: array, items: {type: string}}], [page, query, false, {type: integer, format: "int32", default: 0}], [size, query, false, {type: integer, format: "int32", default: 10}], [project, query, true, {type: string}], [fullConfig, query, false, {type: boolean}], [libraryId, query, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{type: array, items: {"$ref": "#/components/schemas/AbstractDTO"}}, {"$ref": "#/components/schemas/PageSimpleExportFTPConfDTO"}]}}}}}}, {route: /api/rest/exportftpconfiguration, method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/ExportFTPConfigurationDTO"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/ExportFTPConfigurationDTO"}}}}}}, {route: "/api/rest/exportftpconfiguration/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/ExportFTPConfigurationDTO"}}}}}}, {route: "/api/rest/exportftpconfiguration/{id}", method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/ExportFTPConfigurationDTO"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/ExportFTPConfigurationDTO"}}}}}}, {route: "/api/rest/exportftpconfiguration/{id}", method: delete, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/ExportFTPConfigurationDTO"}}}}}}, {route: /api/rest/export/omeka, method: get, parameters: [[name, in, required, schema]; [docs, query, true, {type: array, items: {type: string}}]], responses: {"200": {description: OK, content: {*/*: {schema: {type: string, enum: ["100 CONTINUE", "101 SWITCHING_PROTOCOLS", "102 PROCESSING", "103 CHECKPOINT", "200 OK", "201 CREATED", "202 ACCEPTED", "203 NON_AUTHORITATIVE_INFORMATION", "204 NO_CONTENT", "205 RESET_CONTENT", "206 PARTIAL_CONTENT", "207 MULTI_STATUS", "208 ALREADY_REPORTED", "226 IM_USED", "300 MULTIPLE_CHOICES", "301 MOVED_PERMANENTLY", "302 FOUND", "302 MOVED_TEMPORARILY", "303 SEE_OTHER", "304 NOT_MODIFIED", "305 USE_PROXY", "307 TEMPORARY_REDIRECT", "308 PERMANENT_REDIRECT", "400 BAD_REQUEST", "401 UNAUTHORIZED", "402 PAYMENT_REQUIRED", "403 FORBIDDEN", "404 NOT_FOUND", "405 METHOD_NOT_ALLOWED", "406 NOT_ACCEPTABLE", "407 PROXY_AUTHENTICATION_REQUIRED", "408 REQUEST_TIMEOUT", "409 CONFLICT", "410 GONE", "411 LENGTH_REQUIRED", "412 PRECONDITION_FAILED", "413 PAYLOAD_TOO_LARGE", "413 REQUEST_ENTITY_TOO_LARGE", "414 URI_TOO_LONG", "414 REQUEST_URI_TOO_LONG", "415 UNSUPPORTED_MEDIA_TYPE", "416 REQUESTED_RANGE_NOT_SATISFIABLE", "417 EXPECTATION_FAILED", "418 I_AM_A_TEAPOT", "419 INSUFFICIENT_SPACE_ON_RESOURCE", "420 METHOD_FAILURE", "421 DESTINATION_LOCKED", "422 UNPROCESSABLE_ENTITY", "423 LOCKED", "424 FAILED_DEPENDENCY", "425 TOO_EARLY", "426 UPGRADE_REQUIRED", "428 PRECONDITION_REQUIRED", "429 TOO_MANY_REQUESTS", "431 REQUEST_HEADER_FIELDS_TOO_LARGE", "451 UNAVAILABLE_FOR_LEGAL_REASONS", "500 INTERNAL_SERVER_ERROR", "501 NOT_IMPLEMENTED", "502 BAD_GATEWAY", "503 SERVICE_UNAVAILABLE", "504 GATEWAY_TIMEOUT", "505 HTTP_VERSION_NOT_SUPPORTED", "506 VARIANT_ALSO_NEGOTIATES", "507 INSUFFICIENT_STORAGE", "508 LOOP_DETECTED", "509 BANDWIDTH_LIMIT_EXCEEDED", "510 NOT_EXTENDED", "511 NETWORK_AUTHENTICATION_REQUIRED"]}}}}}}, {route: /api/rest/export/omeka, method: post, parameters: [[name, in, required, schema]; [docUnit, query, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {type: object}}}}}}, {route: /api/rest/export/digitalLibrary, method: get, parameters: [[name, in, required, schema]; [docs, query, true, {type: array, items: {type: string}}]], responses: {"200": {description: OK, content: {*/*: {schema: {type: string, enum: ["100 CONTINUE", "101 SWITCHING_PROTOCOLS", "102 PROCESSING", "103 CHECKPOINT", "200 OK", "201 CREATED", "202 ACCEPTED", "203 NON_AUTHORITATIVE_INFORMATION", "204 NO_CONTENT", "205 RESET_CONTENT", "206 PARTIAL_CONTENT", "207 MULTI_STATUS", "208 ALREADY_REPORTED", "226 IM_USED", "300 MULTIPLE_CHOICES", "301 MOVED_PERMANENTLY", "302 FOUND", "302 MOVED_TEMPORARILY", "303 SEE_OTHER", "304 NOT_MODIFIED", "305 USE_PROXY", "307 TEMPORARY_REDIRECT", "308 PERMANENT_REDIRECT", "400 BAD_REQUEST", "401 UNAUTHORIZED", "402 PAYMENT_REQUIRED", "403 FORBIDDEN", "404 NOT_FOUND", "405 METHOD_NOT_ALLOWED", "406 NOT_ACCEPTABLE", "407 PROXY_AUTHENTICATION_REQUIRED", "408 REQUEST_TIMEOUT", "409 CONFLICT", "410 GONE", "411 LENGTH_REQUIRED", "412 PRECONDITION_FAILED", "413 PAYLOAD_TOO_LARGE", "413 REQUEST_ENTITY_TOO_LARGE", "414 URI_TOO_LONG", "414 REQUEST_URI_TOO_LONG", "415 UNSUPPORTED_MEDIA_TYPE", "416 REQUESTED_RANGE_NOT_SATISFIABLE", "417 EXPECTATION_FAILED", "418 I_AM_A_TEAPOT", "419 INSUFFICIENT_SPACE_ON_RESOURCE", "420 METHOD_FAILURE", "421 DESTINATION_LOCKED", "422 UNPROCESSABLE_ENTITY", "423 LOCKED", "424 FAILED_DEPENDENCY", "425 TOO_EARLY", "426 UPGRADE_REQUIRED", "428 PRECONDITION_REQUIRED", "429 TOO_MANY_REQUESTS", "431 REQUEST_HEADER_FIELDS_TOO_LARGE", "451 UNAVAILABLE_FOR_LEGAL_REASONS", "500 INTERNAL_SERVER_ERROR", "501 NOT_IMPLEMENTED", "502 BAD_GATEWAY", "503 SERVICE_UNAVAILABLE", "504 GATEWAY_TIMEOUT", "505 HTTP_VERSION_NOT_SUPPORTED", "506 VARIANT_ALSO_NEGOTIATES", "507 INSUFFICIENT_STORAGE", "508 LOOP_DETECTED", "509 BANDWIDTH_LIMIT_EXCEEDED", "510 NOT_EXTENDED", "511 NETWORK_AUTHENTICATION_REQUIRED"]}}}}}}, {route: /api/rest/export/digitalLibrary, method: post, parameters: [[name, in, required, schema]; [docUnit, query, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {type: object}}}}}}, {route: /api/rest/export/cines, method: get, parameters: [[name, in, required, schema]; [docUnit, query, true, {type: string}], [cinesStatus, query, true, {type: string}], [docs, query, true, {type: array, items: {type: string}}], [conf, query, false, {"$ref": "#/components/schemas/MailboxConfiguration"}]], responses: {"200": {description: OK, content: {application/xml: {schema: {type: object}}, */*: {schema: {type: object}}, application/json: {schema: {type: object}}}}}}, {route: /api/rest/export/cines, method: post, parameters: [[name, in, required, schema]; [docUnit, query, true, {type: string}], [conf, query, false, {"$ref": "#/components/schemas/SftpConfiguration"}], [reversion, query, false, {type: boolean, default: false}]], requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/BibliographicRecordDcDTO"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/CinesReport"}}}}}}, {route: "/api/rest/export/cines/{id}", method: post, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/BibliographicRecordDcDTO"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {type: object}}}}}}, {route: /api/rest/docunit, method: get, parameters: [[name, in, required, schema]; [sibling, query, true, {type: string}], [search, query, false, {type: string}], [hasDigitalDocuments, query, false, {type: boolean, default: false}], [active, query, false, {type: boolean, default: true}], [archived, query, false, {type: boolean, default: false}], [nonArchived, query, false, {type: boolean, default: false}], [archivable, query, false, {type: boolean, default: false}], [nonArchivable, query, false, {type: boolean, default: false}], [distributed, query, false, {type: boolean, default: false}], [nonDistributed, query, false, {type: boolean, default: false}], [distributable, query, false, {type: boolean, default: false}], [nonDistributable, query, false, {type: boolean, default: false}], [libraries, query, false, {type: array, items: {type: string}}], [projects, query, false, {type: array, items: {type: string}}], [lots, query, false, {type: array, items: {type: string}}], [statuses, query, false, {type: array, items: {type: string}}], [lastModifiedDateFrom, query, false, {type: string, format: date}], [lastModifiedDateTo, query, false, {type: string, format: date}], [createdDateFrom, query, false, {type: string, format: date}], [createdDateTo, query, false, {type: string, format: date}], [page, query, false, {type: integer, format: "int32", default: 0}], [size, query, false, {type: integer, format: "int32", default: 2147483647}], [sorts, query, false, {type: array, items: {type: string}}], [project, query, false, {type: string}], [parent, query, true, {type: string}], [lot, query, true, {type: string}], [docs, query, true, {type: array, items: {type: string}}], [types, query, false, {type: array, items: {type: string}, default: [METS, VIEW]}], [pgcnId, query, false, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{"$ref": "#/components/schemas/PageSimpleDocUnitDTO"}, {type: array, items: {"$ref": "#/components/schemas/DocUnitDTO"}}, {"$ref": "#/components/schemas/PageSummaryDocUnitWithLotDTO"}, {type: array, items: {"$ref": "#/components/schemas/SummaryDocUnitWithLotDTO"}}, {type: array, items: {"$ref": "#/components/schemas/SummaryDocUnitDTO"}}, {type: array, items: {"$ref": "#/components/schemas/SimpleDocUnitDTO"}}]}}, */*: {schema: {type: object}}}}}}, {route: /api/rest/docunit, method: post, parameters: [[name, in, required, schema]; [train, query, true, {type: string}], [page, query, false, {type: integer, format: "int32", default: 0}], [size, query, false, {type: integer, format: "int32", default: 2147483647}], [sorts, query, false, {type: array, items: {type: string}}], [siblingid, query, true, {type: string}], [removesibling, query, true, {type: string}], [parent, query, true, {type: string}], [child, query, true, {type: string}], [project, query, true, {type: string}], [lot, query, false, {type: string}]], requestBody: {content: {application/json: {schema: {type: array, items: {type: string}}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {oneOf: [{type: array, items: {"$ref": "#/components/schemas/DocUnitUpdateErrorDTO"}}, {"$ref": "#/components/schemas/DocUnitDTO"}, {type: array, items: {"$ref": "#/components/schemas/DocUnitDeletedReportDTO"}}, {type: object}]}}, application/json: {schema: {oneOf: [{"$ref": "#/components/schemas/PageSimpleListDocUnitDTO"}, {type: array, items: {"$ref": "#/components/schemas/MinimalListDocUnitDTO"}}, {"$ref": "#/components/schemas/DocUnitDTO"}]}}}}}}, {route: "/api/rest/docunit/{identifier}", method: get, parameters: [[name, in, required, schema]; [identifier, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/DocUnitDTO"}}}}}}, {route: "/api/rest/docunit/{identifier}", method: post, parameters: [[name, in, required, schema]; [identifier, path, true, {type: string}]], requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/DocUnitDTO"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {oneOf: [{type: object}, {"$ref": "#/components/schemas/DocUnitDTO"}]}}, application/json: {schema: {"$ref": "#/components/schemas/DocUnitDTO"}}}}}}, {route: "/api/rest/docunit/{identifier}", method: delete, parameters: [[name, in, required, schema]; [identifier, path, true, {type: string}]], responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/DocUnitDeletedReportDTO"}}}}}}, {route: /api/rest/docpropertytype, method: get, parameters: [[name, in, required, schema]; [supertype, query, true, {type: string, enum: [DC, DCQ, CUSTOM, CUSTOM_CINES, CUSTOM_ARCHIVE, CUSTOM_OMEKA]}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [[type, items]; [array, {"$ref": "#/components/schemas/DocPropertyTypeDTO"}], [array, {"$ref": "#/components/schemas/DocPropertyType"}]]}}}}}}, {route: /api/rest/docpropertytype, method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/DocPropertyType"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/DocPropertyType"}}}}}}, {route: "/api/rest/docpropertytype/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/DocPropertyType"}}}}}}, {route: "/api/rest/docpropertytype/{id}", method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/DocPropertyType"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/DocPropertyType"}}}}}}, {route: "/api/rest/docpropertytype/{id}", method: delete, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/DocPropertyType"}}}}}}, {route: "/api/rest/digitaldocument/{identifier}", method: get, parameters: [[name, in, required, schema]; [identifier, path, true, {type: string}], [pageNumber, query, true, {type: integer, format: "int32"}]], responses: {"200": {description: OK, content: {*/*: {schema: {oneOf: [{"$ref": "#/components/schemas/SimpleDocPageDTO"}, {"$ref": "#/components/schemas/DigitalDocumentDTO"}, {type: object, additionalProperties: {type: string}}, {type: array, items: {type: string}}, {type: array, items: {type: integer, format: "int32"}}, {type: string}, {"$ref": "#/components/schemas/CheckConfigurationDTO"}]}}, image/jpeg: {schema: {type: object}}}}, "202": {description: Accepted, content: {*/*: {schema: {type: object, additionalProperties: {type: object, additionalProperties: {type: string}}}}}}}}, {route: "/api/rest/digitaldocument/{identifier}", method: post, parameters: [[name, in, required, schema]; [identifier, path, true, {type: string}], [checksOK, query, true, {type: boolean}], [sampling, query, true, {type: boolean}]], requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/DigitalDocumentDTO"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {oneOf: [{type: object}, {"$ref": "#/components/schemas/DigitalDocumentDTO"}]}}}}}}, {route: "/api/rest/delivery_configuration/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/DeliverySlipConfiguration"}}}}}}, {route: "/api/rest/delivery_configuration/{id}", method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/DeliverySlipConfiguration"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/DeliverySlipConfiguration"}}}}}}, {route: /api/rest/delivery, method: get, parameters: [[name, in, required, schema]; [lot, query, true, {type: string}], [from, query, true, {type: string, format: date}], [library, query, false, {type: array, items: {type: string}}], [project, query, false, {type: array, items: {type: string}}], [status, query, false, {type: array, items: {type: string, enum: [SAVED, DELIVERING, DELIVERED, TO_BE_CONTROLLED, VALIDATED, REJECTED, BACK_TO_PROVIDER, AUTOMATICALLY_REJECTED, DELIVERED_AGAIN, DELIVERING_ERROR, TREATED, CLOSED, CANCELED]}}], [search, query, false, {type: string}], [libraries, query, false, {type: array, items: {type: string}}], [projects, query, false, {type: array, items: {type: string}}], [lots, query, false, {type: array, items: {type: string}}], [providers, query, false, {type: array, items: {type: string}}], [deliveryDateFrom, query, false, {type: string, format: date}], [deliveryDateTo, query, false, {type: string, format: date}], [page, query, false, {type: integer, format: "int32", default: 0}], [size, query, false, {type: integer, format: "int32", default: 10}], [digitalDocIdentifier, query, true, {type: string}], [filteredProjects, query, false, {type: array, items: {type: string}}], [filteredLots, query, false, {type: array, items: {type: string}}], [docUnit, query, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{type: array, items: {"$ref": "#/components/schemas/AuditDeliveryRevisionDTO"}}, {type: array, items: {"$ref": "#/components/schemas/SimpleDeliveryDTO"}}, {"$ref": "#/components/schemas/PageSimpleDeliveryDTO"}, {type: array, items: {"$ref": "#/components/schemas/DeliveryDTO"}}, {"$ref": "#/components/schemas/DeliveryDTO"}, {type: object, additionalProperties: {type: integer, format: "int64"}}, {type: object, additionalProperties: {type: object}}]}}}}}}, {route: /api/rest/delivery, method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/ManualDeliveryDTO"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/DeliveryDTO"}}}}}}, {route: "/api/rest/delivery/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}], [create_docs, query, false, {type: boolean, default: false}], [digitalId, query, false, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{"$ref": "#/components/schemas/SimpleDeliveryForViewerDTO"}, {"$ref": "#/components/schemas/DeliveryDTO"}, {type: array, items: {"$ref": "#/components/schemas/SimpleDeliveredDigitalDocDTO"}}, {type: array, items: {type: string}}, {"$ref": "#/components/schemas/SampleDTO"}, {"$ref": "#/components/schemas/CheckConfigurationDTO"}]}}, */*: {schema: {"$ref": "#/components/schemas/PreDeliveryDTO"}}, application/octet-stream: {schema: {type: object}}}}}}, {route: "/api/rest/delivery/{id}", method: post, parameters: [[name, in, required, schema]; [id, path, true, {type: string}], [lockedDocs, query, false, {type: array, items: {type: string}}], [create_docs, query, false, {type: boolean, default: false}], [prefixToExclude, query, false, {type: array, items: {type: string}}]], requestBody: {content: {application/json: {schema: {type: array, items: {"$ref": "#/components/schemas/PreDeliveryDocumentDTO"}}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/DeliveryDTO"}}, */*: {schema: {type: object}}}}}}, {route: "/api/rest/delivery/{id}", method: delete, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {*/*: {schema: {type: object}}}}}}, {route: /api/rest/csvmapping, method: get, parameters: [[name, in, required, schema]; [library, query, true, {"$ref": "#/components/schemas/Library"}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{uniqueItems: true, type: array, items: {"$ref": "#/components/schemas/CSVMappingDTO"}}, {type: array, items: {"$ref": "#/components/schemas/CSVMappingDTO"}}]}}}}}}, {route: /api/rest/csvmapping, method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/CSVMapping"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/CSVMapping"}}}}}}, {route: "/api/rest/csvmapping/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}], [library, query, false, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/CSVMapping"}}}}}}, {route: "/api/rest/csvmapping/{id}", method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/CSVMapping"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/CSVMapping"}}}}}}, {route: "/api/rest/csvmapping/{id}", method: delete, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {*/*: {schema: {type: object}}}}}}, {route: /api/rest/conf_sftp, method: get, parameters: [[name, in, required, schema]; [active, query, false, {type: boolean}], [search, query, false, {type: string}], [libraries, query, false, {type: array, items: {type: string}}], [page, query, false, {type: integer, format: "int32", default: 0}], [size, query, false, {type: integer, format: "int32", default: 10}], [library, query, false, {type: string}], [project, query, false, {type: string}], [configuration, query, false, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{"$ref": "#/components/schemas/PageSftpConfigurationDTO"}, {type: array, items: {"$ref": "#/components/schemas/SftpConfigurationDTO"}}, {type: array, items: {"$ref": "#/components/schemas/CinesPAC"}}, {uniqueItems: true, type: array, items: {"$ref": "#/components/schemas/SftpConfigurationDTO"}}]}}}}}}, {route: /api/rest/conf_sftp, method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/SftpConfiguration"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/SftpConfiguration"}}}}}}, {route: "/api/rest/conf_sftp/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{type: object, additionalProperties: {type: object}}, {"$ref": "#/components/schemas/SftpConfiguration"}]}}}}}}, {route: "/api/rest/conf_sftp/{id}", method: post, parameters: [{name: id, in: path, required: true, schema: {type: string}}, {name: file, in: query, required: true, schema: {type: array, items: {type: string, format: binary}}}, {name: content-type, in: header, schema: {type: string, enum: [multipart/*]}}], requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/SftpConfiguration"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/SftpConfiguration"}}}}}}, {route: "/api/rest/conf_sftp/{id}", method: delete, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {*/*: {schema: {type: object}}}}}}, {route: /api/rest/conf_omeka, method: get, parameters: [[name, in, required, schema]; [active, query, false, {type: boolean}], [search, query, false, {type: string}], [libraries, query, false, {type: array, items: {type: string}}], [omekas, query, false, {type: boolean}], [page, query, false, {type: integer, format: "int32", default: 0}], [size, query, false, {type: integer, format: "int32", default: 10}], [omekaConf, query, false, {type: string}], [project, query, false, {type: string}], [library, query, true, {"$ref": "#/components/schemas/Library"}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{"$ref": "#/components/schemas/PageOmekaConfigurationDTO"}, {type: array, items: {"$ref": "#/components/schemas/OmekaConfigurationDTO"}}, {type: array, items: {"$ref": "#/components/schemas/OmekaList"}}, {uniqueItems: true, type: array, items: {"$ref": "#/components/schemas/OmekaConfigurationDTO"}}]}}}}}}, {route: /api/rest/conf_omeka, method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/OmekaConfigurationDTO"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/OmekaConfigurationDTO"}}}}}}, {route: "/api/rest/conf_omeka/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/OmekaConfigurationDTO"}}}}}}, {route: "/api/rest/conf_omeka/{id}", method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/OmekaConfigurationDTO"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/OmekaConfigurationDTO"}}}}}}, {route: "/api/rest/conf_omeka/{id}", method: delete, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {*/*: {schema: {type: object}}}}}}, {route: /api/rest/conf_mail, method: get, parameters: [[name, in, required, schema]; [search, query, false, {type: string}], [library, query, false, {type: array, items: {type: string}}], [active, query, false, {type: boolean, default: true}]], responses: {"200": {description: OK, content: {application/json: {schema: {type: array, items: {"$ref": "#/components/schemas/MailboxConfigurationDTO"}}}}}}}, {route: /api/rest/conf_mail, method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/MailboxConfiguration"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/MailboxConfiguration"}}}}}}, {route: "/api/rest/conf_mail/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/MailboxConfiguration"}}}}}}, {route: "/api/rest/conf_mail/{id}", method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/MailboxConfiguration"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/MailboxConfiguration"}}}}}}, {route: "/api/rest/conf_mail/{id}", method: delete, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {*/*: {schema: {type: object}}}}}}, {route: /api/rest/conf_internet_archive, method: get, parameters: [[name, in, required, schema]; [active, query, false, {type: boolean}], [search, query, false, {type: string}], [libraries, query, false, {type: array, items: {type: string}}], [page, query, false, {type: integer, format: "int32", default: 0}], [size, query, false, {type: integer, format: "int32", default: 10}], [library, query, true, {"$ref": "#/components/schemas/Library"}], [project, query, false, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{"$ref": "#/components/schemas/PageInternetArchiveConfigurationDTO"}, {type: array, items: {"$ref": "#/components/schemas/InternetArchiveConfigurationDTO"}}, {uniqueItems: true, type: array, items: {"$ref": "#/components/schemas/InternetArchiveConfigurationDTO"}}, {type: array, items: {"$ref": "#/components/schemas/InternetArchiveCollection"}}]}}}}}}, {route: /api/rest/conf_internet_archive, method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/InternetArchiveConfiguration"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/InternetArchiveConfiguration"}}}}}}, {route: "/api/rest/conf_internet_archive/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/InternetArchiveConfiguration"}}}}}}, {route: "/api/rest/conf_internet_archive/{id}", method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/InternetArchiveConfiguration"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/InternetArchiveConfiguration"}}}}}}, {route: "/api/rest/conf_internet_archive/{id}", method: delete, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {*/*: {schema: {type: object}}}}}}, {route: /api/rest/conf_digital_library, method: get, parameters: [[name, in, required, schema]; [search, query, false, {type: string}], [libraries, query, false, {type: array, items: {type: string}}], [page, query, false, {type: integer, format: "int32", default: 0}], [size, query, false, {type: integer, format: "int32", default: 10}], [library, query, true, {"$ref": "#/components/schemas/Library"}], [active, query, false, {type: boolean}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{uniqueItems: true, type: array, items: {"$ref": "#/components/schemas/DigitalLibraryConfigurationDTO"}}, {"$ref": "#/components/schemas/PageDigitalLibraryConfigurationDTO"}]}}}}}}, {route: /api/rest/conf_digital_library, method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/DigitalLibraryConfiguration"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/DigitalLibraryConfiguration"}}}}}}, {route: "/api/rest/conf_digital_library/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/DigitalLibraryConfiguration"}}}}}}, {route: "/api/rest/conf_digital_library/{id}", method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/DigitalLibraryConfiguration"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/DigitalLibraryConfiguration"}}}}}}, {route: "/api/rest/conf_digital_library/{id}", method: delete, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {*/*: {schema: {type: object}}}}}}, {route: /api/rest/conf/cineslangcode, method: get, responses: {"200": {description: OK, content: {application/json: {schema: {type: array, items: {"$ref": "#/components/schemas/CinesLanguageCode"}}}}}}}, {route: /api/rest/conf/cineslangcode, method: post, requestBody: {content: {application/json: {schema: {type: array, items: {"$ref": "#/components/schemas/CinesLanguageCode"}}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {type: array, items: {"$ref": "#/components/schemas/CinesLanguageCode"}}}}}}}, {route: "/api/rest/condreportslip_configuration/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/ConditionReportSlipConfiguration"}}}}}}, {route: "/api/rest/condreportslip_configuration/{id}", method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/ConditionReportSlipConfiguration"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/ConditionReportSlipConfiguration"}}}}}}, {route: /api/rest/condreport_prop_conf, method: get, parameters: [[name, in, required, schema]; [library, query, true, {"$ref": "#/components/schemas/Library"}], [project, query, true, {"$ref": "#/components/schemas/Project"}], [internal, query, true, {type: string, enum: [BINDING_DESC, BODY_DESC, DIMENSION]}], [desc, query, true, {"$ref": "#/components/schemas/DescriptionProperty"}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{"$ref": "#/components/schemas/PropertyConfigurationDTO"}, {type: array, items: {"$ref": "#/components/schemas/PropertyConfigurationDTO"}}]}}}}}}, {route: /api/rest/condreport_prop_conf, method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/PropertyConfigurationDTO"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/PropertyConfigurationDTO"}}}}}}, {route: "/api/rest/condreport_prop_conf/{identifier}", method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/PropertyConfigurationDTO"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/PropertyConfigurationDTO"}}}}}}, {route: /api/rest/condreport_detail, method: get, parameters: [[name, in, required, schema]; [report, query, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {type: array, items: {"$ref": "#/components/schemas/ConditionReportDetail"}}}}}}}, {route: /api/rest/condreport_detail, method: post, parameters: [[name, in, required, schema]; [type, query, true, {type: string, enum: [LIBRARY_LEAVING, PROVIDER_RECEPTION, DIGITALIZATION, LIBRARY_BACK, LIBRARY_RETURN, LIBRARY_NEW_DIGIT]}], [detail, query, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/ConditionReportDetail"}}}}}}, {route: "/api/rest/condreport_detail/{identifier}", method: get, parameters: [[name, in, required, schema]; [identifier, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/ConditionReportDetail"}}}}}}, {route: "/api/rest/condreport_detail/{identifier}", method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/ConditionReportDetail"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/ConditionReportDetail"}}}}}}, {route: "/api/rest/condreport_detail/{identifier}", method: delete, parameters: [[name, in, required, schema]; [identifier, path, true, {type: string}]], responses: {"200": {description: OK}}}, {route: /api/rest/condreport_desc_value, method: get, parameters: [[name, in, required, schema]; [property, query, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {type: array, items: {"$ref": "#/components/schemas/DescriptionValue"}}}}}}}, {route: /api/rest/condreport_desc_value, method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/DescriptionValue"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/DescriptionValue"}}}}}}, {route: "/api/rest/condreport_desc_value/{identifier}", method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/DescriptionValue"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/DescriptionValue"}}}}}}, {route: "/api/rest/condreport_desc_value/{identifier}", method: delete, parameters: [[name, in, required, schema]; [identifier, path, true, {type: string}]], responses: {"200": {description: OK}}}, {route: /api/rest/condreport_desc_prop, method: get, parameters: [[name, in, required, schema]; [library, query, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {type: array, items: {"$ref": "#/components/schemas/DescriptionProperty"}}}}}}}, {route: /api/rest/condreport_desc_prop, method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/DescriptionProperty"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/DescriptionProperty"}}}}}}, {route: "/api/rest/condreport_desc_prop/{identifier}", method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/DescriptionProperty"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/DescriptionProperty"}}}}}}, {route: "/api/rest/condreport_desc_prop/{identifier}", method: delete, parameters: [[name, in, required, schema]; [identifier, path, true, {type: string}]], responses: {"200": {description: OK}}}, {route: /api/rest/condreport_attachment, method: get, parameters: [[name, in, required, schema]; [report, query, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {type: array, items: {"$ref": "#/components/schemas/ConditionReportAttachment"}}}}}}}, {route: /api/rest/condreport_attachment, method: post, parameters: [[name, in, required, schema]; [file, query, true, {type: array, items: {type: string, format: binary}}], [report, query, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {type: array, items: {"$ref": "#/components/schemas/ConditionReportAttachment"}}}}}}}, {route: /api/rest/condreport, method: get, parameters: [[name, in, required, schema]; [docUnit, query, true, {type: string}], [sampleId, query, true, {type: string}], [import-template, query, true, {type: array, items: {type: string}}], [format, query, false, {type: string, default: XLSX, enum: [XLS, XLSX]}], [sortAttributes, query, true, {type: array, items: {type: string}}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{"$ref": "#/components/schemas/ConditionReport"}, {uniqueItems: true, type: array, items: {type: string}}]}}}}}}, {route: /api/rest/condreport, method: post, parameters: [[name, in, required, schema]; [page, query, false, {type: integer, format: "int32", default: 0}], [size, query, false, {type: integer, format: "int32", default: 2147483647}], [sorts, query, false, {type: array, items: {type: string}}], [file, query, true, {type: array, items: {type: string, format: binary}}], [docUnit, query, true, {type: string}]], requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/SearchRequest"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{type: array, items: {"$ref": "#/components/schemas/ImportResult"}}, {"$ref": "#/components/schemas/PageSearchResult"}, {"$ref": "#/components/schemas/ConditionReport"}]}}}}}}, {route: "/api/rest/condreport/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}], [exportto, query, false, {type: string, default: PDF, enum: [ODT, PDF]}]], responses: {"200": {description: OK}}}, {route: "/api/rest/condreport/{id}", method: post, parameters: [[name, in, required, schema]; [docUnit, query, true, {type: string}], [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {type: object}}}}}}, {route: "/api/rest/condreport/{identifier}", method: get, parameters: [[name, in, required, schema]; [identifier, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/ConditionReport"}}}}}}, {route: "/api/rest/condreport/{identifier}", method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/ConditionReport"}}}, required: true}, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/ConditionReport"}}}}}}, {route: "/api/rest/condreport/{identifier}", method: delete, parameters: [[name, in, required, schema]; [identifier, path, true, {type: string}]], responses: {"200": {description: OK}}}, {route: "/api/rest/checkslip_configuration/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/CheckSlipConfiguration"}}}}}}, {route: "/api/rest/checkslip_configuration/{id}", method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/CheckSlipConfiguration"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/CheckSlipConfiguration"}}}}}}, {route: /api/rest/checkconfiguration, method: get, parameters: [[name, in, required, schema]; [search, query, false, {type: string}], [libraries, query, false, {type: array, items: {type: string}}], [page, query, false, {type: integer, format: "int32", default: 0}], [size, query, false, {type: integer, format: "int32", default: 10}], [project, query, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{type: array, items: {"$ref": "#/components/schemas/AutomaticCheckRuleDTO"}}, {"$ref": "#/components/schemas/PageSimpleCheckConfigurationDTO"}, {type: array, items: {"$ref": "#/components/schemas/SimpleCheckConfigurationDTO"}}]}}, */*: {schema: {"$ref": "#/components/schemas/CheckConfigurationDTO"}}}}}}, {route: /api/rest/checkconfiguration, method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/CheckConfigurationDTO"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/CheckConfigurationDTO"}}}}}}, {route: "/api/rest/checkconfiguration/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/CheckConfigurationDTO"}}}}}}, {route: "/api/rest/checkconfiguration/{id}", method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/CheckConfigurationDTO"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/CheckConfigurationDTO"}}}}}}, {route: "/api/rest/checkconfiguration/{id}", method: delete, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/CheckConfigurationDTO"}}}}}}, {route: /api/rest/check, method: get, responses: {"200": {description: OK, content: {*/*: {schema: {uniqueItems: true, type: array, items: {type: string, enum: [UNREADABLE, BAD_NAME, BAD_HIERARCHY, MISSING_PAGE, TRUNCATED_INFORMATION, BAD_RESOLUTION, BAD_THRESHOLD, WRONG_FORMAT, FOREIGN_BODIES, BAD_METADATA, INCONSISTENT_METADATA, ANOTHER_MAJ, BLURRED_IMAGE, SLANT_IMAGE, HALO_ON_IMAGE, SHADOW_ON_IMAGE, GEOMETRICAL_ANOMALY, CHROMATIC_ANOMALY, WRONG_FRAMING, WRONG_ORDER, BAD_OCR, ANOTHER_MIN]}}}}}}}, {route: /api/rest/check, method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/CheckDTO"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/CheckDTO"}}}}}}, {route: "/api/rest/check/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}], [deliveryId, query, true, {type: string}], [pageId, query, true, {type: string}], [pageNumber, query, true, {type: integer, format: "int32"}]], responses: {"200": {description: OK, content: {*/*: {schema: {type: object, additionalProperties: {type: object}}}}}, "202": {description: Accepted, content: {*/*: {schema: {oneOf: [{"$ref": "#/components/schemas/DocErrorReport"}, {uniqueItems: true, type: array, items: {type: string, enum: [UNREADABLE, BAD_NAME, BAD_HIERARCHY, MISSING_PAGE, TRUNCATED_INFORMATION, BAD_RESOLUTION, BAD_THRESHOLD, WRONG_FORMAT, FOREIGN_BODIES, BAD_METADATA, INCONSISTENT_METADATA, ANOTHER_MAJ, BLURRED_IMAGE, SLANT_IMAGE, HALO_ON_IMAGE, SHADOW_ON_IMAGE, GEOMETRICAL_ANOMALY, CHROMATIC_ANOMALY, WRONG_FRAMING, WRONG_ORDER, BAD_OCR, ANOTHER_MIN]}}, {uniqueItems: true, type: array, items: {type: string}}]}}}}}}, {route: "/api/rest/check/{id}", method: post, parameters: [[name, in, required, schema]; [id, path, true, {type: string}], [pageNumber, query, true, {type: integer, format: "int32"}], [deliveryId, query, true, {type: string}]], requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/DocPageErrorsDTO"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/CheckDTO"}}}}, "202": {description: Accepted, content: {*/*: {schema: {"$ref": "#/components/schemas/DocErrorReport"}}}}}}, {route: /api/rest/bibliographicrecord, method: get, parameters: [[name, in, required, schema]; [search, query, false, {type: string}], [libraries, query, false, {type: array, items: {type: string}}], [projects, query, false, {type: array, items: {type: string}}], [lots, query, false, {type: array, items: {type: string}}], [statuses, query, false, {type: array, items: {type: string}}], [lastModifiedDateFrom, query, false, {type: string, format: date}], [lastModifiedDateTo, query, false, {type: string, format: date}], [createdDateFrom, query, false, {type: string, format: date}], [createdDateTo, query, false, {type: string, format: date}], [orphan, query, false, {type: boolean}], [page, query, false, {type: integer, format: "int32", default: 0}], [size, query, false, {type: integer, format: "int32", default: 10}], [sorts, query, false, {type: array, items: {type: string}}], [searchAsList, query, false, {type: string}], [trains, query, false, {type: array, items: {type: string}}], [identifier, query, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{"$ref": "#/components/schemas/PageSimpleListBibliographicRecordDTO"}, {"$ref": "#/components/schemas/PageSimpleBibliographicRecordDTO"}, {type: array, items: {"$ref": "#/components/schemas/SimpleBibliographicRecordDTO"}}]}}}}}}, {route: /api/rest/bibliographicrecord, method: post, requestBody: {content: {application/json: {schema: {type: array, items: {type: string}}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/BibliographicRecordDTO"}}}}}}, {route: "/api/rest/bibliographicrecord/{identifier}", method: get, parameters: [[name, in, required, schema]; [identifier, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [["$ref"]; ["#/components/schemas/BibliographicRecordDcDTO"], ["#/components/schemas/BibliographicRecordDTO"]]}}}}}}, {route: "/api/rest/bibliographicrecord/{identifier}", method: post, requestBody: {content: {application/json: {schema: {"$ref": "#/components/schemas/BibliographicRecordDTO"}}}, required: true}, responses: {"200": {description: OK, content: {*/*: {schema: {"$ref": "#/components/schemas/BibliographicRecordDTO"}}}}}}, {route: "/api/rest/bibliographicrecord/{identifier}", method: delete, parameters: [[name, in, required, schema]; [identifier, path, true, {type: string}]], responses: {"200": {description: OK, content: {*/*: {schema: {type: object}}}}}}, {route: /api/rest/account/change_password, method: post, requestBody: {content: {application/json: {schema: {type: string}}}, required: true}, responses: {"200": {description: OK}}}, {route: /api_int/authenticate, method: get, responses: {"200": {description: OK, content: {application/json: {schema: {type: string}}}}}}, {route: /api_int/account, method: get, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/UserAccountDTO"}}}}}}, {route: /api_int/account/sessions, method: get, responses: {"200": {description: OK, content: {application/json: {schema: {type: array, items: {"$ref": "#/components/schemas/PersistentToken"}}}}}}}, {route: "/api/rest/workflow/{identifier}", method: get, parameters: [[name, in, required, schema]; [identifier, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/DocUnitWorkflowDTO"}}}}}}, {route: "/api/rest/viewer/document/{identifier}/{pageNumber}/{args1}/{args2}/{test}/default.jpg", method: get, parameters: [[name, in, required, schema]; [identifier, path, true, {type: string}], [pageNumber, path, true, {type: integer, format: "int32"}], ["args1", path, true, {type: string}], ["args2", path, true, {type: string}]], responses: {"200": {description: OK, content: {image/jpeg: {schema: {type: object}}}}}}, {route: "/api/rest/viewer/document/{identifier}/{pageNumber}/info.json", method: get, parameters: [[name, in, required, schema]; [identifier, path, true, {type: string}], [pageNumber, path, true, {type: integer, format: "int32"}]], responses: {"200": {description: OK, content: {application/json: {schema: {type: object, additionalProperties: {type: object}}}}}}}, {route: "/api/rest/viewer/document/{identifier}/{pageNumber}/full/{dim1}/{dim2}/default.jpg", method: get, parameters: [[name, in, required, schema]; [identifier, path, true, {type: string}], [pageNumber, path, true, {type: integer, format: "int32"}], ["dim1", path, true, {type: string}], ["dim2", path, true, {type: string}]], responses: {"200": {description: OK, content: {image/jpeg: {schema: {type: object}}}}}}, {route: "/api/rest/viewer/document/{identifier}/toc", method: get, parameters: [[name, in, required, schema]; [identifier, path, true, {type: string}]], responses: {"200": {description: OK, content: {*/*: {schema: {type: object}}}}}}, {route: "/api/rest/viewer/document/{identifier}/thumbnail/{pageNumber}/thumb.jpg", method: get, parameters: [[name, in, required, schema]; [identifier, path, true, {type: string}], [pageNumber, path, true, {type: integer, format: "int32"}]], responses: {"200": {description: OK, content: {*/*: {schema: {type: object}}}}}}, {route: "/api/rest/viewer/document/{identifier}/master/{pageNumber}", method: get, parameters: [[name, in, required, schema]; [identifier, path, true, {type: string}], [pageNumber, path, true, {type: integer, format: "int32"}]], responses: {"200": {description: OK, content: {*/*: {schema: {type: object}}}}}}, {route: "/api/rest/viewer/document/{identifier}/master/", method: get, parameters: [[name, in, required, schema]; [identifier, path, true, {type: string}]], responses: {"200": {description: OK, content: {*/*: {schema: {type: object}}}}}}, {route: "/api/rest/viewer/document/{identifier}/manifest", method: get, parameters: [[name, in, required, schema]; [identifier, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {type: object}}}}}}, {route: "/api/rest/viewer/document/sample/{identifier}/manifest", method: get, parameters: [[name, in, required, schema]; [identifier, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {type: object}}}}}}, {route: "/api/rest/train/pdf/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK}}}, {route: "/api/rest/train/csv/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}], [encoding, query, false, {type: string, default: "ISO-8859-15"}], [separator, query, false, {type: string, default: ";"}]], responses: {"200": {description: OK}}}, {route: /api/rest/statistics, method: get, parameters: [[name, in, required, schema]; [libraries, query, false, {type: array, items: {type: string}}], [project, query, false, {type: array, items: {type: string}}], [library, query, false, {type: array, items: {type: string}}], [train, query, false, {type: array, items: {type: string}}], [status, query, false, {type: array, items: {type: string, enum: [CREATED, IN_PREPARATION, IN_DIGITIZATION, RECEIVING_PHYSICAL_DOCUMENTS, CANCELED, CLOSED]}}], [returnFrom, query, false, {type: string, format: date}], [returnTo, query, false, {type: string, format: date}], [sendFrom, query, false, {type: string, format: date}], [sendTo, query, false, {type: string, format: date}], [insuranceFrom, query, false, {type: number, format: double}], [insuranceTo, query, false, {type: number, format: double}], [from, query, false, {type: string, format: date}], [to, query, false, {type: string, format: date}], [page, query, false, {type: integer, format: "int32", default: 0}], [size, query, false, {type: integer, format: "int32", default: 10}], [search, query, false, {type: string}], [projects, query, false, {type: array, items: {type: string}}], [sorts, query, false, {type: array, items: {type: string}}], [lot, query, false, {type: array, items: {type: string}}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{type: array, items: {"$ref": "#/components/schemas/StatisticsProviderTrainDTO"}}, {type: array, items: {type: object, additionalProperties: {type: object}}}, {"$ref": "#/components/schemas/PageStatisticsProgressDTO"}, {"$ref": "#/components/schemas/PageStatisticsProjectDTO"}]}}}}}}, {route: /api/rest/statistics/workflow, method: get, parameters: [[name, in, required, schema]; [library, query, false, {type: array, items: {type: string}}], [project, query, false, {type: array, items: {type: string}}], [lot, query, false, {type: array, items: {type: string}}], [state, query, false, {type: array, items: {type: string, enum: [INITIALISATION_DOCUMENT, GENERATION_BORDEREAU, VALIDATION_CONSTAT_ETAT, VALIDATION_BORDEREAU_CONSTAT_ETAT, CONSTAT_ETAT_AVANT_NUMERISATION, NUMERISATION_EN_ATTENTE, CONSTAT_ETAT_APRES_NUMERISATION, LIVRAISON_DOCUMENT_EN_COURS, RELIVRAISON_DOCUMENT_EN_COURS, CONTROLES_AUTOMATIQUES_EN_COURS, CONTROLE_QUALITE_EN_COURS, PREREJET_DOCUMENT, PREVALIDATION_DOCUMENT, VALIDATION_DOCUMENT, VALIDATION_NOTICES, RAPPORT_CONTROLES, ARCHIVAGE_DOCUMENT, DIFFUSION_DOCUMENT, DIFFUSION_DOCUMENT_OMEKA, DIFFUSION_DOCUMENT_DIGITAL_LIBRARY, DIFFUSION_DOCUMENT_LOCALE, CLOTURE_DOCUMENT]}}], [role, query, false, {type: array, items: {type: string}}], [from, query, false, {type: string, format: date}], [to, query, false, {type: string, format: date}], [delivery, query, false, {type: array, items: {type: string}}], [workflow, query, false, {type: array, items: {type: string}}], [project_active, query, false, {type: boolean, default: false}], [train, query, false, {type: array, items: {type: string}}], [pgcnid, query, false, {type: string}], [status, query, false, {type: array, items: {type: string, enum: [NOT_STARTED, PENDING, FINISHED, CANCELED, FAILED, TO_WAIT, WAITING, WAITING_NEXT_COMPLETED, TO_SKIP, SKIPPED]}}], [mine, query, false, {type: boolean, default: false}], [page, query, false, {type: integer, format: "int32", default: 0}], [size, query, false, {type: integer, format: "int32", default: 10}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{type: array, items: {"$ref": "#/components/schemas/WorkflowUserProgressDTO"}}, {type: array, items: {"$ref": "#/components/schemas/WorkflowUserActivityDTO"}}, {type: array, items: {"$ref": "#/components/schemas/WorkflowStateProgressDTO"}}, {type: array, items: {"$ref": "#/components/schemas/WorkflowProfileActivityDTO"}}, {type: array, items: {"$ref": "#/components/schemas/WorkflowDocUnitProgressDTOPending"}}, {"$ref": "#/components/schemas/PageWorkflowDocUnitProgressDTO"}, {type: array, items: {"$ref": "#/components/schemas/WorkflowDocUnitProgressDTO"}}, {"$ref": "#/components/schemas/PageWorkflowDeliveryProgressDTO"}]}}}}}}, {route: /api/rest/statistics/docunit, method: get, parameters: [[name, in, required, schema]; [libraries, query, false, {type: array, items: {type: string}}], [from, query, true, {type: string, format: date}], [failures, query, false, {type: boolean, default: false}], [search, query, false, {type: string}], [page, query, false, {type: integer, format: "int32", default: 0}], [size, query, false, {type: integer, format: "int32", default: 10}], [library, query, false, {type: array, items: {type: string}}], [project, query, false, {type: array, items: {type: string}}], [provider, query, false, {type: array, items: {type: string}}], [to, query, false, {type: string, format: date}], [lot, query, false, {type: array, items: {type: string}}], [type, query, false, {type: array, items: {type: string}}], [collection, query, false, {type: array, items: {type: string}}], [state, query, true, {type: string, enum: [INITIALISATION_DOCUMENT, GENERATION_BORDEREAU, VALIDATION_CONSTAT_ETAT, VALIDATION_BORDEREAU_CONSTAT_ETAT, CONSTAT_ETAT_AVANT_NUMERISATION, NUMERISATION_EN_ATTENTE, CONSTAT_ETAT_APRES_NUMERISATION, LIVRAISON_DOCUMENT_EN_COURS, RELIVRAISON_DOCUMENT_EN_COURS, CONTROLES_AUTOMATIQUES_EN_COURS, CONTROLE_QUALITE_EN_COURS, PREREJET_DOCUMENT, PREVALIDATION_DOCUMENT, VALIDATION_DOCUMENT, VALIDATION_NOTICES, RAPPORT_CONTROLES, ARCHIVAGE_DOCUMENT, DIFFUSION_DOCUMENT, DIFFUSION_DOCUMENT_OMEKA, DIFFUSION_DOCUMENT_DIGITAL_LIBRARY, DIFFUSION_DOCUMENT_LOCALE, CLOTURE_DOCUMENT]}], [delivery, query, false, {type: array, items: {type: string}}], [groupby, query, false, {type: string, default: PROJECT, enum: [PROJECT, LOT, DELIVERY]}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{"$ref": "#/components/schemas/PageString"}, {type: array, items: {"$ref": "#/components/schemas/StatisticsProcessedDocUnitDTO"}}, {"$ref": "#/components/schemas/PageStatisticsDocRejectedDTO"}, {"$ref": "#/components/schemas/PageStatisticsDocPublishedDTO"}, {"$ref": "#/components/schemas/PageStatisticsDocUnitCountDTO"}, {"$ref": "#/components/schemas/StatisticsDocUnitStatusRatioDTO"}, {type: object}, {type: array, items: {"$ref": "#/components/schemas/StatisticsDocUnitAverageDTO"}}]}}}}}}, {route: /api/rest/statistics/delivery, method: get, parameters: [[name, in, required, schema]; [library, query, false, {type: array, items: {type: string}}], [provider, query, false, {type: array, items: {type: string}}], [from, query, false, {type: string, format: date}], [to, query, false, {type: string, format: date}]], responses: {"200": {description: OK, content: {application/json: {schema: {type: array, items: {"$ref": "#/components/schemas/StatisticsProviderDeliveryDTO"}}}}}}}, {route: /api/rest/search, method: get, parameters: [[name, in, required, schema]; [suggest, query, true, {type: string}], [size, query, false, {type: integer, format: "int32", default: 10}], [search, query, false, {type: string}], [filter, query, false, {type: string}], [page, query, false, {type: integer, format: "int32", default: 0}], [get, query, false, {type: array, items: {type: string, enum: [CONDREPORT, DELIVERY, DOCUNIT, LOT, PROJECT, TRAIN]}, default: [DOCUNIT]}], [fuzzy, query, false, {type: boolean, default: true}], [sort, query, false, {type: string}], [facet, query, false, {type: boolean, default: false}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{type: object, additionalProperties: {"$ref": "#/components/schemas/PageObject"}}, {type: array, items: {type: object, additionalProperties: {type: object}}}]}}}}}}, {route: "/api/rest/sample/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/SampleDTO"}}}}}}, {route: /api/rest/physicaldocument, method: get, parameters: [[name, in, required, schema]; [train, query, true, {type: string}], [docUnitIds, query, true, {type: array, items: {type: string}}]], responses: {"200": {description: OK, content: {*/*: {schema: {type: array, items: {"$ref": "#/components/schemas/ListPhysicalDocumentDTO"}}}}}}}, {route: /api/rest/ocrlanguages, method: get, parameters: [[name, in, required, schema]; [library, query, false, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {type: array, items: {"$ref": "#/components/schemas/OcrLanguageDTO"}}}}}}}, {route: /api/rest/numahop, method: get, responses: {"200": {description: OK, content: {application/json: {schema: {type: object, additionalProperties: {type: object}}}}}}}, {route: "/api/rest/lot/pdf/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK}}}, {route: "/api/rest/lot/csv/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}], [encoding, query, false, {type: string, default: "utf-8"}], [separator, query, false, {type: string, default: ";"}]], responses: {"200": {description: OK}}}, {route: /api/rest/internet_archive, method: get, parameters: [[name, in, required, schema]; [docs, query, true, {type: array, items: {type: string}}]], responses: {"200": {description: OK}}}, {route: /api/rest/importreport, method: get, parameters: [[name, in, required, schema]; [page, query, false, {type: integer, format: "int32", default: 0}], [size, query, false, {type: integer, format: "int32", default: 10}], [library, query, false, {"$ref": "#/components/schemas/Library"}], [search, query, false, {type: string}], [users, query, false, {type: array, items: {type: string}}], [status, query, false, {type: array, items: {type: string, enum: [PENDING, PRE_IMPORTING, DEDUPLICATING, USER_VALIDATION, IMPORTING, INDEXING, COMPLETED, FAILED]}}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/PageImportReport"}}}}}}, {route: "/api/rest/importreport/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}], [file, query, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{type: object, additionalProperties: {type: object}}, {"$ref": "#/components/schemas/ImportReport"}]}}, text/plain: {schema: {type: object}}}}}}, {route: "/api/rest/importreport/{id}", method: delete, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {*/*: {schema: {type: object}}}}}}, {route: /api/rest/impdocunit, method: get, parameters: [[name, in, required, schema]; [report, query, true, {"$ref": "#/components/schemas/ImportReport"}], [page, query, false, {type: integer, format: "int32", default: 0}], [size, query, false, {type: integer, format: "int32", default: 10}], [state, query, false, {type: array, items: {type: string, enum: [AVAILABLE, NOT_AVAILABLE, DELETED, CANCELED, CLOSED]}}], [errors, query, false, {type: boolean, default: false}], [duplicates, query, false, {type: boolean, default: false}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/PageImportedDocUnit"}}}}}}, {route: /api/rest/health, method: get, responses: {"200": {description: OK, content: {*/*: {schema: {type: string}}}}}}, {route: "/api/rest/filesgestionconfig/{idLibrary}", method: get, parameters: [[name, in, required, schema]; [idLibrary, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/FilesGestionConfigDTO"}}}}}}, {route: /api/rest/filecleaning/deleteorphans, method: get, parameters: [[name, in, required, schema]; [library, query, true, {type: string}]], responses: {"200": {description: OK}}}, {route: /api/rest/export/rdfxml, method: get, parameters: [[name, in, required, schema]; [type, query, false, {type: string, default: DC, enum: [DC, DCQ, CUSTOM, CUSTOM_CINES, CUSTOM_ARCHIVE, CUSTOM_OMEKA]}], [docUnit, query, true, {type: string}]], responses: {"200": {description: OK}}}, {route: /api/rest/export/ead, method: get, parameters: [[name, in, required, schema]; [docUnit, query, true, {type: string}]], responses: {"200": {description: OK}}}, {route: /api/rest/export/csv, method: get, parameters: [[name, in, required, schema]; [lot, query, true, {type: string}], [field, query, false, {type: array, items: {type: string}}], [docfield, query, false, {type: array, items: {type: string}}], [bibfield, query, false, {type: array, items: {type: string}}], [physfield, query, false, {type: array, items: {type: string}}], [encoding, query, false, {type: string, default: "ISO-8859-15"}], [separator, query, false, {type: string, default: ";"}], [docUnit, query, true, {type: array, items: {type: string}}]], responses: {"200": {description: OK}}}, {route: "/api/rest/export/cines/{identifier}", method: get, parameters: [[name, in, required, schema]; [identifier, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/BibliographicRecordDcDTO"}}}}}}, {route: /api/rest/export/cines/regenerateMets, method: get, parameters: [[name, in, required, schema]; [library, query, true, {type: string}]], responses: {"200": {description: OK, content: {*/*: {schema: {type: object}}}}}}, {route: /api/rest/downloadlogsfile, method: get, parameters: [[name, in, required, schema]; [dtFile, query, true, {type: string}]], responses: {"200": {description: OK, content: {application/octet-stream: {schema: {type: object}}}}}}, {route: /api/rest/docunit/initHistory, method: get, parameters: [[name, in, required, schema]; [library, query, true, {type: string}]], responses: {"200": {description: OK, content: {*/*: {schema: {type: object}}}}}}, {route: /api/rest/digitaldocument, method: get, parameters: [[name, in, required, schema]; [search, query, false, {type: string}], [status, query, false, {type: array, items: {type: string}}], [libraries, query, false, {type: array, items: {type: string}}], [projects, query, false, {type: array, items: {type: string}}], [lots, query, false, {type: array, items: {type: string}}], [trains, query, false, {type: array, items: {type: string}}], [deliveries, query, false, {type: array, items: {type: string}}], [page, query, false, {type: integer, format: "int32", default: 0}], [dateFrom, query, false, {type: string, format: date}], [dateTo, query, false, {type: string, format: date}], [dateLimitFrom, query, false, {type: string, format: date}], [dateLimitTo, query, false, {type: string, format: date}], [searchPgcnId, query, false, {type: string}], [searchTitre, query, false, {type: string}], [searchRadical, query, false, {type: string}], [fileFormats, query, false, {type: array, items: {type: string}}], [maxAngles, query, false, {type: array, items: {type: string}}], [searchPageFrom, query, false, {type: integer, format: "int32"}], [searchPageTo, query, false, {type: integer, format: "int32"}], [searchPageCheckFrom, query, false, {type: integer, format: "int64"}], [searchPageCheckTo, query, false, {type: integer, format: "int64"}], [searchMinSize, query, false, {type: number, format: double}], [searchMaxSize, query, false, {type: number, format: double}], [validated, query, false, {type: boolean}], [size, query, false, {type: integer, format: "int32", default: 2147483647}], [sorts, query, false, {type: array, items: {type: string}}]], responses: {"200": {description: OK, content: {*/*: {schema: {type: array, items: {"$ref": "#/components/schemas/SimpleDigitalDocumentDTO"}}}, application/json: {schema: {"$ref": "#/components/schemas/PageSimpleListDigitalDocumentDTO"}}}}}}, {route: "/api/rest/delivery/pdf/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK}}}, {route: "/api/rest/delivery/lot_pdf/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK}}}, {route: "/api/rest/delivery/lot_csv/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}], [encoding, query, false, {type: string, default: "utf-8"}], [separator, query, false, {type: string, default: ";"}]], responses: {"200": {description: OK}}}, {route: "/api/rest/delivery/csv/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}], [encoding, query, false, {type: string, default: "utf-8"}], [separator, query, false, {type: string, default: ";"}]], responses: {"200": {description: OK}}}, {route: "/api/rest/condreport_attachment/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK}}}, {route: /api/rest/condreport/pdf, method: get, parameters: [[name, in, required, schema]; [reports, query, true, {type: array, items: {type: string}}]], responses: {"200": {description: OK}}}, {route: /api/rest/condreport/csv, method: get, parameters: [[name, in, required, schema]; [reports, query, true, {type: array, items: {type: string}}], [encoding, query, false, {type: string, default: "ISO-8859-15"}], [separator, query, false, {type: string, default: ";"}]], responses: {"200": {description: OK}}}, {route: "/api/rest/checkconfiguration/{idDocUnit}", method: get, parameters: [[name, in, required, schema]; [idDocUnit, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/CheckConfigurationDTO"}}}}}}, {route: "/api/rest/check/pdf/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK}}}, {route: "/api/rest/check/lot_pdf/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK}}}, {route: "/api/rest/check/lot_csv/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}], [encoding, query, false, {type: string, default: "utf-8"}], [separator, query, false, {type: string, default: ";"}]], responses: {"200": {description: OK}}}, {route: "/api/rest/check/csv/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}], [encoding, query, false, {type: string, default: "utf-8"}], [separator, query, false, {type: string, default: ";"}]], responses: {"200": {description: OK}}}, {route: /api/rest/check/auto, method: get, parameters: [[name, in, required, schema]; [docUnit, query, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {type: object}}}}}}, {route: "/api/rest/bibliographicrecord/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/BibliographicRecordDTO"}}}}}}, {route: /api/rest/authorization, method: get, responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [[type, items]; [array, {"$ref": "#/components/schemas/AuthorizationDTO"}], [array, {"$ref": "#/components/schemas/Authorization"}]]}}}}}}, {route: "/api/rest/authorization/{identifier}", method: get, parameters: [[name, in, required, schema]; [identifier, path, true, {type: string}]], responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/Authorization"}}}}}}, {route: /api/rest/authenticate, method: get, responses: {"200": {description: OK, content: {application/json: {schema: {type: string}}}}}}, {route: /api/rest/audit/train, method: get, parameters: [[name, in, required, schema]; [from, query, true, {type: string, format: date}], [library, query, false, {type: array, items: {type: string}}], [project, query, false, {type: array, items: {type: string}}], [status, query, false, {type: array, items: {type: string, enum: [CREATED, IN_PREPARATION, IN_DIGITIZATION, RECEIVING_PHYSICAL_DOCUMENTS, CANCELED, CLOSED]}}]], responses: {"200": {description: OK, content: {application/json: {schema: {type: array, items: {"$ref": "#/components/schemas/AuditTrainRevisionDTO"}}}}}}}, {route: /api/rest/audit/project, method: get, parameters: [[name, in, required, schema]; [from, query, true, {type: string, format: date}], [library, query, false, {type: array, items: {type: string}}], [status, query, false, {type: array, items: {type: string, enum: [CREATED, ONGOING, PENDING, CANCELED, CLOSED]}}]], responses: {"200": {description: OK, content: {application/json: {schema: {type: array, items: {"$ref": "#/components/schemas/AuditProjectRevisionDTO"}}}}}}}, {route: "/api/rest/audit/mapping/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}], [rev, query, false, {type: integer, format: "int32", default: 1}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{"$ref": "#/components/schemas/Mapping"}, {type: array, items: {"$ref": "#/components/schemas/AuditRevision"}}]}}}}}}, {route: /api/rest/audit/lot, method: get, parameters: [[name, in, required, schema]; [from, query, true, {type: string, format: date}], [library, query, false, {type: array, items: {type: string}}], [project, query, false, {type: array, items: {type: string}}], [status, query, false, {type: array, items: {type: string, enum: [CREATED, ONGOING, PENDING, CANCELED, CLOSED]}}]], responses: {"200": {description: OK, content: {application/json: {schema: {type: array, items: {"$ref": "#/components/schemas/AuditLotRevisionDTO"}}}}}}}, {route: "/api/rest/audit/docunit/{id}", method: get, parameters: [[name, in, required, schema]; [id, path, true, {type: string}], [rev, query, false, {type: integer, format: "int32", default: 1}]], responses: {"200": {description: OK, content: {application/json: {schema: {oneOf: [{"$ref": "#/components/schemas/DocUnit"}, {type: array, items: {"$ref": "#/components/schemas/AuditDocUnitRevisionDTO"}}]}}}}}}, {route: /api/rest/audit/delivery, method: get, parameters: [[name, in, required, schema]; [from, query, true, {type: string, format: date}], [library, query, false, {type: array, items: {type: string}}], [project, query, false, {type: array, items: {type: string}}], [lot, query, false, {type: array, items: {type: string}}], [status, query, false, {type: array, items: {type: string, enum: [SAVED, DELIVERING, DELIVERED, TO_BE_CONTROLLED, VALIDATED, REJECTED, BACK_TO_PROVIDER, AUTOMATICALLY_REJECTED, DELIVERED_AGAIN, DELIVERING_ERROR, TREATED, CLOSED, CANCELED]}}]], responses: {"200": {description: OK, content: {application/json: {schema: {type: array, items: {"$ref": "#/components/schemas/AuditDeliveryRevisionDTO"}}}}}}}, {route: /api/rest/account, method: get, responses: {"200": {description: OK, content: {application/json: {schema: {"$ref": "#/components/schemas/SimpleUserAccountDTO"}}}}}}, {route: "/api_int/account/sessions/{series}", method: delete, parameters: [[name, in, required, schema]; [series, path, true, {type: string}]], responses: {"200": {description: OK}}}, {route: "/api/rest/template/{identifier}", method: delete, parameters: [[name, in, required, schema]; [identifier, path, true, {type: string}]], responses: {"200": {description: OK}}}, {route: "/api/rest/condreport_attachment/{identifier}", method: delete, parameters: [[name, in, required, schema]; [identifier, path, true, {type: string}]], responses: {"200": {description: OK}}}]